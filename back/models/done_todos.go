// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DoneTodo is an object representing the database table.
type DoneTodo struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	TodoID    int       `boil:"todo_id" json:"todo_id" toml:"todo_id" yaml:"todo_id"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *doneTodoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L doneTodoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DoneTodoColumns = struct {
	ID        string
	UserID    string
	TodoID    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	UserID:    "user_id",
	TodoID:    "todo_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var DoneTodoTableColumns = struct {
	ID        string
	UserID    string
	TodoID    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "done_todos.id",
	UserID:    "done_todos.user_id",
	TodoID:    "done_todos.todo_id",
	CreatedAt: "done_todos.created_at",
	UpdatedAt: "done_todos.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DoneTodoWhere = struct {
	ID        whereHelperint
	UserID    whereHelperint
	TodoID    whereHelperint
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"done_todos\".\"id\""},
	UserID:    whereHelperint{field: "\"done_todos\".\"user_id\""},
	TodoID:    whereHelperint{field: "\"done_todos\".\"todo_id\""},
	CreatedAt: whereHelpernull_Time{field: "\"done_todos\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"done_todos\".\"updated_at\""},
}

// DoneTodoRels is where relationship names are stored.
var DoneTodoRels = struct {
	Todo string
	User string
}{
	Todo: "Todo",
	User: "User",
}

// doneTodoR is where relationships are stored.
type doneTodoR struct {
	Todo *Todo `boil:"Todo" json:"Todo" toml:"Todo" yaml:"Todo"`
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*doneTodoR) NewStruct() *doneTodoR {
	return &doneTodoR{}
}

func (r *doneTodoR) GetTodo() *Todo {
	if r == nil {
		return nil
	}
	return r.Todo
}

func (r *doneTodoR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// doneTodoL is where Load methods for each relationship are stored.
type doneTodoL struct{}

var (
	doneTodoAllColumns            = []string{"id", "user_id", "todo_id", "created_at", "updated_at"}
	doneTodoColumnsWithoutDefault = []string{"user_id", "todo_id"}
	doneTodoColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	doneTodoPrimaryKeyColumns     = []string{"id"}
	doneTodoGeneratedColumns      = []string{}
)

type (
	// DoneTodoSlice is an alias for a slice of pointers to DoneTodo.
	// This should almost always be used instead of []DoneTodo.
	DoneTodoSlice []*DoneTodo
	// DoneTodoHook is the signature for custom DoneTodo hook methods
	DoneTodoHook func(context.Context, boil.ContextExecutor, *DoneTodo) error

	doneTodoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	doneTodoType                 = reflect.TypeOf(&DoneTodo{})
	doneTodoMapping              = queries.MakeStructMapping(doneTodoType)
	doneTodoPrimaryKeyMapping, _ = queries.BindMapping(doneTodoType, doneTodoMapping, doneTodoPrimaryKeyColumns)
	doneTodoInsertCacheMut       sync.RWMutex
	doneTodoInsertCache          = make(map[string]insertCache)
	doneTodoUpdateCacheMut       sync.RWMutex
	doneTodoUpdateCache          = make(map[string]updateCache)
	doneTodoUpsertCacheMut       sync.RWMutex
	doneTodoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var doneTodoAfterSelectMu sync.Mutex
var doneTodoAfterSelectHooks []DoneTodoHook

var doneTodoBeforeInsertMu sync.Mutex
var doneTodoBeforeInsertHooks []DoneTodoHook
var doneTodoAfterInsertMu sync.Mutex
var doneTodoAfterInsertHooks []DoneTodoHook

var doneTodoBeforeUpdateMu sync.Mutex
var doneTodoBeforeUpdateHooks []DoneTodoHook
var doneTodoAfterUpdateMu sync.Mutex
var doneTodoAfterUpdateHooks []DoneTodoHook

var doneTodoBeforeDeleteMu sync.Mutex
var doneTodoBeforeDeleteHooks []DoneTodoHook
var doneTodoAfterDeleteMu sync.Mutex
var doneTodoAfterDeleteHooks []DoneTodoHook

var doneTodoBeforeUpsertMu sync.Mutex
var doneTodoBeforeUpsertHooks []DoneTodoHook
var doneTodoAfterUpsertMu sync.Mutex
var doneTodoAfterUpsertHooks []DoneTodoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DoneTodo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doneTodoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DoneTodo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doneTodoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DoneTodo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doneTodoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DoneTodo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doneTodoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DoneTodo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doneTodoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DoneTodo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doneTodoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DoneTodo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doneTodoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DoneTodo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doneTodoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DoneTodo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doneTodoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDoneTodoHook registers your hook function for all future operations.
func AddDoneTodoHook(hookPoint boil.HookPoint, doneTodoHook DoneTodoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		doneTodoAfterSelectMu.Lock()
		doneTodoAfterSelectHooks = append(doneTodoAfterSelectHooks, doneTodoHook)
		doneTodoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		doneTodoBeforeInsertMu.Lock()
		doneTodoBeforeInsertHooks = append(doneTodoBeforeInsertHooks, doneTodoHook)
		doneTodoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		doneTodoAfterInsertMu.Lock()
		doneTodoAfterInsertHooks = append(doneTodoAfterInsertHooks, doneTodoHook)
		doneTodoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		doneTodoBeforeUpdateMu.Lock()
		doneTodoBeforeUpdateHooks = append(doneTodoBeforeUpdateHooks, doneTodoHook)
		doneTodoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		doneTodoAfterUpdateMu.Lock()
		doneTodoAfterUpdateHooks = append(doneTodoAfterUpdateHooks, doneTodoHook)
		doneTodoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		doneTodoBeforeDeleteMu.Lock()
		doneTodoBeforeDeleteHooks = append(doneTodoBeforeDeleteHooks, doneTodoHook)
		doneTodoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		doneTodoAfterDeleteMu.Lock()
		doneTodoAfterDeleteHooks = append(doneTodoAfterDeleteHooks, doneTodoHook)
		doneTodoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		doneTodoBeforeUpsertMu.Lock()
		doneTodoBeforeUpsertHooks = append(doneTodoBeforeUpsertHooks, doneTodoHook)
		doneTodoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		doneTodoAfterUpsertMu.Lock()
		doneTodoAfterUpsertHooks = append(doneTodoAfterUpsertHooks, doneTodoHook)
		doneTodoAfterUpsertMu.Unlock()
	}
}

// One returns a single doneTodo record from the query.
func (q doneTodoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DoneTodo, error) {
	o := &DoneTodo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for done_todos")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DoneTodo records from the query.
func (q doneTodoQuery) All(ctx context.Context, exec boil.ContextExecutor) (DoneTodoSlice, error) {
	var o []*DoneTodo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DoneTodo slice")
	}

	if len(doneTodoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DoneTodo records in the query.
func (q doneTodoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count done_todos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q doneTodoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if done_todos exists")
	}

	return count > 0, nil
}

// Todo pointed to by the foreign key.
func (o *DoneTodo) Todo(mods ...qm.QueryMod) todoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TodoID),
	}

	queryMods = append(queryMods, mods...)

	return Todos(queryMods...)
}

// User pointed to by the foreign key.
func (o *DoneTodo) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadTodo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (doneTodoL) LoadTodo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDoneTodo interface{}, mods queries.Applicator) error {
	var slice []*DoneTodo
	var object *DoneTodo

	if singular {
		var ok bool
		object, ok = maybeDoneTodo.(*DoneTodo)
		if !ok {
			object = new(DoneTodo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDoneTodo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDoneTodo))
			}
		}
	} else {
		s, ok := maybeDoneTodo.(*[]*DoneTodo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDoneTodo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDoneTodo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &doneTodoR{}
		}
		args[object.TodoID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &doneTodoR{}
			}

			args[obj.TodoID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`todos`),
		qm.WhereIn(`todos.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Todo")
	}

	var resultSlice []*Todo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Todo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for todos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for todos")
	}

	if len(todoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Todo = foreign
		if foreign.R == nil {
			foreign.R = &todoR{}
		}
		foreign.R.DoneTodos = append(foreign.R.DoneTodos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TodoID == foreign.ID {
				local.R.Todo = foreign
				if foreign.R == nil {
					foreign.R = &todoR{}
				}
				foreign.R.DoneTodos = append(foreign.R.DoneTodos, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (doneTodoL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDoneTodo interface{}, mods queries.Applicator) error {
	var slice []*DoneTodo
	var object *DoneTodo

	if singular {
		var ok bool
		object, ok = maybeDoneTodo.(*DoneTodo)
		if !ok {
			object = new(DoneTodo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDoneTodo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDoneTodo))
			}
		}
	} else {
		s, ok := maybeDoneTodo.(*[]*DoneTodo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDoneTodo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDoneTodo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &doneTodoR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &doneTodoR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.DoneTodos = append(foreign.R.DoneTodos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.DoneTodos = append(foreign.R.DoneTodos, local)
				break
			}
		}
	}

	return nil
}

// SetTodo of the doneTodo to the related item.
// Sets o.R.Todo to related.
// Adds o to related.R.DoneTodos.
func (o *DoneTodo) SetTodo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Todo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"done_todos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"todo_id"}),
		strmangle.WhereClause("\"", "\"", 2, doneTodoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TodoID = related.ID
	if o.R == nil {
		o.R = &doneTodoR{
			Todo: related,
		}
	} else {
		o.R.Todo = related
	}

	if related.R == nil {
		related.R = &todoR{
			DoneTodos: DoneTodoSlice{o},
		}
	} else {
		related.R.DoneTodos = append(related.R.DoneTodos, o)
	}

	return nil
}

// SetUser of the doneTodo to the related item.
// Sets o.R.User to related.
// Adds o to related.R.DoneTodos.
func (o *DoneTodo) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"done_todos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, doneTodoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &doneTodoR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			DoneTodos: DoneTodoSlice{o},
		}
	} else {
		related.R.DoneTodos = append(related.R.DoneTodos, o)
	}

	return nil
}

// DoneTodos retrieves all the records using an executor.
func DoneTodos(mods ...qm.QueryMod) doneTodoQuery {
	mods = append(mods, qm.From("\"done_todos\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"done_todos\".*"})
	}

	return doneTodoQuery{q}
}

// FindDoneTodo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDoneTodo(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DoneTodo, error) {
	doneTodoObj := &DoneTodo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"done_todos\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, doneTodoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from done_todos")
	}

	if err = doneTodoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return doneTodoObj, err
	}

	return doneTodoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DoneTodo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no done_todos provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doneTodoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	doneTodoInsertCacheMut.RLock()
	cache, cached := doneTodoInsertCache[key]
	doneTodoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			doneTodoAllColumns,
			doneTodoColumnsWithDefault,
			doneTodoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(doneTodoType, doneTodoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(doneTodoType, doneTodoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"done_todos\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"done_todos\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into done_todos")
	}

	if !cached {
		doneTodoInsertCacheMut.Lock()
		doneTodoInsertCache[key] = cache
		doneTodoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DoneTodo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DoneTodo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	doneTodoUpdateCacheMut.RLock()
	cache, cached := doneTodoUpdateCache[key]
	doneTodoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			doneTodoAllColumns,
			doneTodoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update done_todos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"done_todos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, doneTodoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(doneTodoType, doneTodoMapping, append(wl, doneTodoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update done_todos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for done_todos")
	}

	if !cached {
		doneTodoUpdateCacheMut.Lock()
		doneTodoUpdateCache[key] = cache
		doneTodoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q doneTodoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for done_todos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for done_todos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DoneTodoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doneTodoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"done_todos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, doneTodoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in doneTodo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all doneTodo")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DoneTodo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no done_todos provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doneTodoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	doneTodoUpsertCacheMut.RLock()
	cache, cached := doneTodoUpsertCache[key]
	doneTodoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			doneTodoAllColumns,
			doneTodoColumnsWithDefault,
			doneTodoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			doneTodoAllColumns,
			doneTodoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert done_todos, could not build update column list")
		}

		ret := strmangle.SetComplement(doneTodoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(doneTodoPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert done_todos, could not build conflict column list")
			}

			conflict = make([]string, len(doneTodoPrimaryKeyColumns))
			copy(conflict, doneTodoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"done_todos\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(doneTodoType, doneTodoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(doneTodoType, doneTodoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert done_todos")
	}

	if !cached {
		doneTodoUpsertCacheMut.Lock()
		doneTodoUpsertCache[key] = cache
		doneTodoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DoneTodo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DoneTodo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DoneTodo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), doneTodoPrimaryKeyMapping)
	sql := "DELETE FROM \"done_todos\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from done_todos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for done_todos")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q doneTodoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no doneTodoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from done_todos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for done_todos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DoneTodoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(doneTodoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doneTodoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"done_todos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doneTodoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from doneTodo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for done_todos")
	}

	if len(doneTodoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DoneTodo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDoneTodo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DoneTodoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DoneTodoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doneTodoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"done_todos\".* FROM \"done_todos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doneTodoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DoneTodoSlice")
	}

	*o = slice

	return nil
}

// DoneTodoExists checks if the DoneTodo row exists.
func DoneTodoExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"done_todos\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if done_todos exists")
	}

	return exists, nil
}

// Exists checks if the DoneTodo row exists.
func (o *DoneTodo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DoneTodoExists(ctx, exec, o.ID)
}
