package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"log"
	"strconv"
	"tarikihongan-todo/db"
	"tarikihongan-todo/internal/auth"
	"tarikihongan-todo/models"

	"github.com/volatiletech/sqlboiler/v4/boil"
)

// CreateTodo is the resolver for the CreateTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, title string) (*models.Response, error) {
	user := auth.CurrentUser

	todo := models.Todo{
		Title:         title,
		CreatedUserID: user.ID,
	}
	if err := todo.Insert(ctx, db.DB, boil.Infer()); err != nil {
		log.Fatal(err)
		errMeg := err.Error()
		return &models.Response{Success: false, Message: &errMeg}, err
	}

	successMeg := "Todo created successfully."
	return &models.Response{Success: true, Message: &successMeg}, nil
}

// UpdateTodo is the resolver for the UpdateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, title string) (*models.Todo, error) {
	user := auth.CurrentUser

	intID, err := strconv.Atoi(id)
	if err != nil {
		log.Fatal(err)
		return nil, err
	}

	qm := models.TodoWhere.ID.EQ(intID)
	todo, err := models.Todos(qm).One(ctx, db.DB)
	if todo.CreatedUserID != user.ID {
		return nil, nil
	}
	if err != nil {
		log.Fatal(err)
		return nil, err
	}
	todo.Title = title
	if _, err := todo.Update(ctx, db.DB, boil.Infer()); err != nil {
		log.Fatal(err)
		return nil, err
	}

	return todo, nil
}

// DeleteTodo is the resolver for the DeleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (*models.Response, error) {
	user := auth.CurrentUser

	intID, err := strconv.Atoi(id)
	if err != nil {
		log.Fatal(err)
		errMeg := err.Error()
		return &models.Response{Success: false, Message: &errMeg}, err
	}

	qm := models.TodoWhere.ID.EQ(intID)
	todo, err := models.Todos(qm).One(ctx, db.DB)
	if todo.CreatedUserID != user.ID {
		errMeg := "You don't have permission to update this todo."
		return &models.Response{Success: false, Message: &errMeg}, nil
	}
	if err != nil {
		log.Fatal(err)
		errMeg := err.Error()
		return &models.Response{Success: false, Message: &errMeg}, err
	}
	if _, err := todo.Delete(ctx, db.DB); err != nil {
		log.Fatal(err)
		errMeg := err.Error()
		return &models.Response{Success: false, Message: &errMeg}, err
	}

	successMeg := "Todo deleted successfully."
	return &models.Response{Success: true, Message: &successMeg}, nil
}

// Todos is the resolver for the Todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*models.Todo, error) {
	todos, err := models.Todos().All(ctx, db.DB)
	if err != nil {
		log.Fatal(err)
		return nil, err
	}
	return todos, nil
}

// TodoByID is the resolver for the TodoByID field.
func (r *queryResolver) TodoByID(ctx context.Context, id string) (*models.Todo, error) {
	intID, err := strconv.Atoi(id)
	if err != nil {
		log.Fatal(err)
		return nil, err
	}
	qm := models.TodoWhere.ID.EQ(intID)
	todo, err := models.Todos(qm).One(ctx, db.DB)
	if err != nil {
		log.Fatal(err)
		return nil, err
	}
	return todo, nil
}

// TodoByCreatedUser is the resolver for the TodoByCreatedUser field.
func (r *queryResolver) TodoByCreatedUser(ctx context.Context, userID *string) ([]*models.Todo, error) {
	intID, err := strconv.Atoi(*userID)
	if err != nil {
		log.Fatal(err)
		return nil, err
	}
	qm := models.TodoWhere.CreatedUserID.EQ(intID)
	todos, err := models.Todos(qm).All(ctx, db.DB)
	if err != nil {
		log.Fatal(err)
		return nil, err
	}
	return todos, nil
}

// CreatedUser is the resolver for the created_user field.
func (r *todoResolver) CreatedUser(ctx context.Context, obj *models.Todo) (*models.User, error) {
	qm := models.UserWhere.ID.EQ(obj.CreatedUserID)
	user, err := models.Users(qm).One(ctx, db.DB)
	if err != nil {
		log.Fatal(err)
		return nil, err
	}
	return user, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *todoResolver) CreatedAt(ctx context.Context, obj *models.Todo) (string, error) {
	return obj.CreatedAt.Format("2006/01/02 15:04"), nil
}

// DoneUsers is the resolver for the done_users field.
func (r *todoResolver) DoneUsers(ctx context.Context, obj *models.Todo) ([]*models.User, error) {
	qm := models.DoneTodoWhere.TodoID.EQ(obj.ID)
	doneTodos, err := models.DoneTodos(qm).All(ctx, db.DB)
	if err != nil {
		log.Fatal(err)
		return nil, err
	}

	ids := make([]int, len(doneTodos))
	for i, doneTodo := range doneTodos {
		ids[i] = doneTodo.UserID
	}

	qm = models.UserWhere.ID.IN(ids)
	users, err := models.Users(qm).All(ctx, db.DB)
	if err != nil {
		log.Fatal(err)
		return nil, err
	}
	return users, nil
}

// Todo returns db.TodoResolver implementation.
func (r *Resolver) Todo() db.TodoResolver { return &todoResolver{r} }

type todoResolver struct{ *Resolver }
