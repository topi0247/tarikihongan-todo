package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"tarikihongan-todo/db"
	"tarikihongan-todo/models"
	"tarikihongan-todo/usecase"

	"github.com/volatiletech/sqlboiler/v4/boil"
)

// UpdateUser is the resolver for the UpdateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, name string) (*models.Response, error) {
	userId, success := usecase.GetCache("user_id")
	if !success {
		errMsg := "User not found."
		return &models.Response{Success: false, Message: &errMsg}, nil
	}

	qm := models.UserWhere.ID.EQ(userId.(int))
	user, err := models.Users(qm).One(ctx, db.DB)
	if err != nil {
		log.Fatalln(err)
		errMsg := err.Error()
		return &models.Response{Success: false, Message: &errMsg}, err
	}

	user.Name = name
	if _, err := user.Update(ctx, db.DB, boil.Infer()); err != nil {
		log.Fatalln(err)
		errMsg := err.Error()
		return &models.Response{Success: false, Message: &errMsg}, err
	}

	message := "User updated successfully."
	return &models.Response{Success: true, Message: &message}, nil
}

// DeleteUser is the resolver for the DeleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context) (*models.Response, error) {
	userId, success := usecase.GetCache("user_id")
	if !success {
		errMsg := "User not found."
		return &models.Response{Success: false, Message: &errMsg}, nil
	}

	qm := models.UserWhere.ID.EQ(userId.(int))
	user, err := models.Users(qm).One(ctx, db.DB)
	if err != nil {
		log.Fatalln(err)
		errMsg := err.Error()
		return &models.Response{Success: false, Message: &errMsg}, err
	}

	if _, err := user.Delete(ctx, db.DB); err != nil {
		log.Fatalln(err)
		errMsg := err.Error()
		return &models.Response{Success: false, Message: &errMsg}, err
	}
	message := "User delete successfully."
	return &models.Response{Success: true, Message: &message}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	users, err := models.Users().All(ctx, db.DB)
	if err != nil {
		return nil, err
	}
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*models.User, error) {
	convID, err := strconv.Atoi(id)
	if err != nil {
		log.Fatalln(err)
		return nil, err
	}
	qm := models.UserWhere.ID.EQ(convID)
	user, err := models.Users(qm).One(ctx, db.DB)
	if err != nil {
		log.Fatalln(err)
		return nil, err
	}
	return user, nil
}

// TodosByUser is the resolver for the TodosByUser field.
func (r *queryResolver) TodosByUser(ctx context.Context, userID *string) ([]*models.Todo, error) {
	intId, err := strconv.Atoi(*userID)
	if err != nil {
		log.Fatalln(err)
		return nil, err
	}
	qm := models.TodoWhere.CreatedUserID.EQ(intId)
	todos, err := models.Todos(qm).All(ctx, db.DB)
	if err != nil {
		log.Fatalln(err)
		return nil, err
	}
	return todos, nil
}

// DoneTodos is the resolver for the DoneTodos field.
func (r *queryResolver) DoneTodos(ctx context.Context, userID *string) ([]*models.Todo, error) {
	panic(fmt.Errorf("not implemented: DoneTodos - DoneTodos"))
}

// Todos is the resolver for the todos field.
func (r *userResolver) Todos(ctx context.Context, obj *models.User) ([]*models.Todo, error) {
	qm := models.TodoWhere.CreatedUserID.EQ(obj.ID)
	todos, err := models.Todos(qm).All(ctx, db.DB)
	if err != nil {
		log.Fatalln(err)
		return nil, err
	}
	return todos, nil
}

// DoneTodos is the resolver for the done_todos field.
func (r *userResolver) DoneTodos(ctx context.Context, obj *models.User) ([]*models.Todo, error) {
	qm := models.DoneTodoWhere.UserID.EQ(obj.ID)
	doneTodos, err := models.DoneTodos(qm).All(ctx, db.DB)
	if err != nil {
		log.Fatalln(err)
		return nil, err
	}

	ids := make([]int, len(doneTodos))
	for _, doneTodo := range doneTodos {
		ids = append(ids, doneTodo.TodoID)
	}

	qm = models.TodoWhere.ID.IN(ids)
	todos, err := models.Todos(qm).All(ctx, db.DB)
	if err != nil {
		log.Fatalln(err)
		return nil, err
	}
	return todos, nil
}

// User returns db.UserResolver implementation.
func (r *Resolver) User() db.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
